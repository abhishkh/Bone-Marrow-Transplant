/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BloodLeukemia_Centre_Coordinator_Role;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Magic.Design.*;
import Business.Organization.LegalOfficerOrganization;
import Business.Organization.Organization;
import Business.People.Patient;
import Business.People.PatientRequest;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.System_Coordinator_Test_WorkRequest;
import Business.WorkQueue.WorkRequest;
import Magic.Design.MyJButton;
import Magic.Design.MyTableFormat;
import java.awt.Color;
import java.awt.Image;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author abhishekmathukiya
 */
public class VolunteerReceiverRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VolunteerReceiverRequestJPanel
     */
    private  EcoSystem system;
    private PatientRequest patientRequest;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private UserAccount userAccount;
    private Network network;
    
    public VolunteerReceiverRequestJPanel(EcoSystem system, UserAccount userAccount, Network network) {
        initComponents();
        this.system = system;
        this.userAccount = userAccount;
        this.network = network;
        tblRequest.getTableHeader().setDefaultRenderer(new MyTableFormat());
        populateRequestTable();
        HideApproveLael();
    }
    
    private void HideApproveLael(){
        approveLabel.setVisible(false);
    }
  

    private void populateRequestTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblRequest.getModel();
        
        dtm.setRowCount(0);
        
         for(PatientRequest patientRequest: system.getPatientRequestDirectory().getPatientRequestList()){            
            Object row[] = new Object[4];
            row[0]= patientRequest;
            row[1]= patientRequest.getName();
            row[2]= patientRequest.getContact();
            row[3]= patientRequest.getStatus();
              
            dtm.addRow(row);
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUID = new javax.swing.JLabel();
        txtUID = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblContactNumber = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        lblEmailID = new javax.swing.JLabel();
        txtEmailID = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        txtGender = new javax.swing.JTextField();
        lblHLAType = new javax.swing.JLabel();
        txtHLAType = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lblStreetAddress = new javax.swing.JLabel();
        txtStreetAddress = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        lblZipCode = new javax.swing.JLabel();
        txtZipCode = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblPatientRequestHadling = new javax.swing.JLabel();
        txtLabConfirmation = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();
        txtStatus = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblProfilePicture = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        covidDiagnosedDateChooser = new com.toedter.calendar.JDateChooser();
        dobDateField = new com.toedter.calendar.JDateChooser();
        approveLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setPreferredSize(new java.awt.Dimension(1150, 720));

        lblUID.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblUID.setText("UID");

        txtUID.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblName.setText("Name");

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(255, 255, 255));
        txtName.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblDOB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDOB.setText("DOB");

        lblAge.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblAge.setText("Age");

        txtAge.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblContactNumber.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblContactNumber.setText("Contact Number");

        txtContactNumber.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtContactNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactNumberActionPerformed(evt);
            }
        });

        lblEmailID.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblEmailID.setText("Email ID");

        txtEmailID.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblGender.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblGender.setText("Gender");

        txtGender.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblHLAType.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblHLAType.setText("HLA Types");

        txtHLAType.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setText("Cancer diagnosed date");

        lblStreetAddress.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblStreetAddress.setText("Street address");

        txtStreetAddress.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblCity.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblCity.setText("City");

        txtCity.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblState.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblState.setText("State");

        txtState.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStateActionPerformed(evt);
            }
        });

        lblZipCode.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblZipCode.setText("ZipCode");

        txtZipCode.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        jLabel19.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel19.setText("Was your disease confirmed by Medical Practitioner?");

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(926, 70));

        lblPatientRequestHadling.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPatientRequestHadling.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientRequestHadling.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPatientRequestHadling.setText("Patient Request Handling");
        lblPatientRequestHadling.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(lblPatientRequestHadling, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(535, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPatientRequestHadling, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtLabConfirmation.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtLabConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLabConfirmationActionPerformed(evt);
            }
        });

        tblRequest.setBackground(new java.awt.Color(153, 153, 153));
        tblRequest.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        tblRequest.setForeground(new java.awt.Color(255, 255, 255));
        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UID", "Name", "Contact", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRequest.setFocusable(false);
        tblRequest.setGridColor(new java.awt.Color(0, 0, 0));
        tblRequest.setRowHeight(30);
        tblRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblRequestMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblRequest);

        txtStatus.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStatusActionPerformed(evt);
            }
        });

        jLabel1.setText("Status");

        lblProfilePicture.setBackground(new java.awt.Color(255, 164, 0));
        lblProfilePicture.setForeground(new java.awt.Color(255, 164, 0));
        lblProfilePicture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 0)));
        lblProfilePicture.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        lblStatus.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblStatus.setText("Status");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel4.setText("Cancer History Details");

        btnApprove.setBackground(new java.awt.Color(153, 153, 153));
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnReject.setBackground(new java.awt.Color(153, 153, 153));
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        covidDiagnosedDateChooser.setBackground(new java.awt.Color(0, 0, 0));
        covidDiagnosedDateChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        covidDiagnosedDateChooser.setForeground(new java.awt.Color(255, 255, 255));

        dobDateField.setBackground(new java.awt.Color(0, 0, 0));
        dobDateField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dobDateField.setForeground(new java.awt.Color(255, 255, 255));

        approveLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/BloodLeukemia_Centre_Coordinator_Role/approve1.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(560, 560, 560)
                .addComponent(jLabel1))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1580, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblZipCode)
                    .addComponent(lblStreetAddress)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUID)
                            .addComponent(lblDOB)
                            .addComponent(lblContactNumber)
                            .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtUID)
                                    .addComponent(dobDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(txtZipCode)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(lblCity)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblState)
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCity, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(txtState))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(lblAge)
                            .addComponent(lblEmailID)
                            .addComponent(lblHLAType))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHLAType, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblProfilePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(578, 578, 578))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(lblStatus)
                            .addComponent(jLabel19)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(29, 29, 29)
                                    .addComponent(covidDiagnosedDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(235, 235, 235)
                                    .addComponent(txtLabConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(239, 239, 239)
                                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(approveLabel)
                        .addGap(145, 145, 145))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(txtHLAType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblUID)
                                .addGap(24, 24, 24)
                                .addComponent(lblDOB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblContactNumber)
                                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addComponent(lblGender))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName)
                                    .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dobDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAge)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEmailID)
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblHLAType)
                                            .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCity)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblState)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(353, 353, 353)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblZipCode)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblProfilePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStatus))
                                .addGap(20, 20, 20)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLabConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(covidDiagnosedDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(approveLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtContactNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNumberActionPerformed

    private void tblRequestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRequestMousePressed
        int selectedRow = tblRequest.getSelectedRow();
        if(selectedRow < 0){
        }
        else{
       //display the details 
            patientRequest = (PatientRequest) tblRequest.getValueAt(selectedRow, 0);
            populateRequestDetails(patientRequest);
            btnApprove.setEnabled(true);
            btnApprove.setEnabled(true);
            
            if(Integer.parseInt(txtAge.getText()) < 18)
            {
            txtAge.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtAge.setForeground(Color.red);
            }
            else {
                txtAge.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                txtAge.setForeground(Color.black);
            }
            if(txtLabConfirmation.getText().equals("false"))
            {
                txtLabConfirmation.setBorder(BorderFactory.createLineBorder(Color.RED));
                txtLabConfirmation.setForeground(Color.red);
            }
            if(patientRequest.getStatus().equals("New Request")){
                btnApprove.setEnabled(true);
                btnApprove.setEnabled(true);
            }
            else {
                btnApprove.setEnabled(false);
                btnApprove.setEnabled(false);
            }
            
            
             dB4OUtil.storeSystem(system);
            
            
        }
    }//GEN-LAST:event_tblRequestMousePressed

    private void txtStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStateActionPerformed

    private void txtStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStatusActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        approveLabel.setVisible(true);
        if( !txtStatus.getText().equals("New Request"))
            {
                JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Request can not be approved!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
           
                
            //    JOptionPane.showMessageDialog(null,"Can Not Approve the Request!");
            }
        
        else
        {
        
        Patient patient = new Patient();
        
        try {
            patient.getHLA().updateHLAlist(txtHLAType.getText());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Patient's HLA Type can only be one of these HLA_A,HLA_B,HLA_C,HLA_DR,HLA_DBQ1</b></html>"));
            return;
        }
        
        patient.setName(txtName.getText());
        patient.setContact(Long.parseLong(txtContactNumber.getText()));  
        
        patient.setReceiverID(txtUID.getText()); // UID, receiverID
        patient.setName(txtName.getText()); // Name
       
       
        
        patient.setAge(Integer.parseInt(txtAge.getText())); // Age
        patient.setGender(txtGender.getText()); // gender
        
        patient.setStreetAddress(txtStreetAddress.getText()); // streetAddress
        patient.setCity(txtCity.getText()); // city
        patient.setState(txtState.getText()); // state
        patient.setZipCode(Integer.parseInt(txtZipCode.getText())); // zipCode
        patient.setContact(Long.parseLong(txtContactNumber.getText())); // contact
        patient.setEmailID(txtEmailID.getText()); // emailID
        patient.setStatus("Centre Approved"); // status
        patient.setLabConfirmation(true); //  labConfirmation
        system.getPatientDirectory().addPatient(patient);
      
        
        for(PatientRequest patientRequest: system.getPatientRequestDirectory().getPatientRequestList()){                      
        
            if(patientRequest.getReceiverID().equals(txtUID.getText())){
            patientRequest.setStatus("Centre Approved");
            dB4OUtil.storeSystem(system);
            }
        }
       
        Enterprise ent = null;
        Organization org = null;
        
        for (Enterprise enterprise : network.getEnterprise_Directory().getEnterpriseList()) {
            if (enterprise.getEnterpriseType().toString().equals("Legal")) {
            
                ent = enterprise;
                System.out.println(enterprise);
                break;
            }
        }
        
        
       
        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
            if(organization instanceof LegalOfficerOrganization) {
                org = organization;
                break;
            }
        }
        
        if (org != null) {
            // WORK REQUEST
        
            WorkRequest request = new System_Coordinator_Test_WorkRequest();

            request.setPatient(patient);
            request.setActionDate(new Date());
            request.setAssigned("Legal Department");
            request.setSummary("Requested for BoneMarrow Reception");
            request.setStatus("Assigned to Legal Department");

            request.setUserAccount(userAccount);
            org.getWorkQueue().getWorkRequestList().add(request);
            System.out.println(org.getName());
            userAccount.getWorkQueue().getWorkRequestList().add(request);
            //user.addUserRequest(request);
            
            dB4OUtil.storeSystem(system);
            populateRequestTable();
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Request approved successfully!</b></html>"));
            txtStatus.setText("Centre Approved");
           
            //JOptionPane.showMessageDialog(null,"Request Sent Successfully", "Info", JOptionPane.INFORMATION_MESSAGE);
            
        } else {
        
         JOptionPane.showMessageDialog(null, "No organization present", "Error", JOptionPane.ERROR_MESSAGE);
         return;
        }

        
        dB4OUtil.storeSystem(system);
        populateRequestTable();
        }
      //  JOptionPane.showMessageDialog(null,"New patient has been added!");
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
         if(!txtStatus.getText().equals("New Request"))
                  {
                      JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Request can not be rejected!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
          
                     // JOptionPane.showMessageDialog(null,"Can Not Reject the Request!");
        }
       else{
        for(PatientRequest patientRequest: system.getPatientRequestDirectory().getPatientRequestList()){                      
        
            if(patientRequest.getName().equals(txtName.getText())){
            txtStatus.setText("Rejected");
            patientRequest.setStatus("Rejected");
            }}
        
        dB4OUtil.storeSystem(system);   
        populateRequestTable();
        
         JOptionPane.showMessageDialog(null, new JLabel("<html><b>Request has been rejected!</b></html>"));
        
        //JOptionPane.showMessageDialog(null,"Rejected the Patient's Request!");
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void txtLabConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLabConfirmationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLabConfirmationActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel approveLabel;
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private com.toedter.calendar.JDateChooser covidDiagnosedDateChooser;
    private com.toedter.calendar.JDateChooser dobDateField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblEmailID;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHLAType;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPatientRequestHadling;
    private javax.swing.JLabel lblProfilePicture;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStreetAddress;
    private javax.swing.JLabel lblUID;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JTable tblRequest;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtHLAType;
    private javax.swing.JTextField txtLabConfirmation;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtStreetAddress;
    private javax.swing.JTextField txtUID;
    private javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables

    private void populateRequestDetails(PatientRequest patientRequest) {
            txtUID.setText(patientRequest.getReceiverID());
            txtName.setText(patientRequest.getName());
            covidDiagnosedDateChooser.setDate(patientRequest.getDob());
            covidDiagnosedDateChooser.setDate(patientRequest.getCancerDiagnosedDate());
            txtAge.setText(String.valueOf(patientRequest.getAge()));
            txtGender.setText(patientRequest.getGender());
            txtHLAType.setText(String.join(", ", (Iterable<String>) patientRequest.getHla().getHlaValuesList()));
            txtStreetAddress.setText(patientRequest.getStreetAddress());
            txtCity.setText(patientRequest.getCity());
            txtState.setText(patientRequest.getState());
            txtZipCode.setText(String.valueOf(patientRequest.getZipCode()));
            txtContactNumber.setText(String.valueOf(patientRequest.getContact()));
            txtEmailID.setText(patientRequest.getEmailID());
            txtStatus.setText(patientRequest.getStatus());
            
            txtLabConfirmation.setText(String.valueOf(patientRequest.isLabConfirmation()));
            
            
            
            
             if(patientRequest.getdP() !=null){
            //Working line
            byte[] JLabelpictureLabel = patientRequest.getdP();
            ImageIcon i = setPicturebyte(JLabelpictureLabel);
            lblProfilePicture.setIcon(i);
            }
            else{
            System.err.println("No Image");
            }
             
             
            txtUID.setEditable(false);
            txtName.setEditable(false);
            txtAge.setEditable(false);
            txtGender.setEditable(false);
            txtHLAType.setEditable(false);
            txtStreetAddress.setEditable(false);
            txtCity.setEditable(false);
            txtState.setEditable(false);
            txtZipCode.setEditable(false);
            txtContactNumber.setEditable(false);
            txtEmailID.setEditable(false);
            txtStatus.setEditable(false);
            txtLabConfirmation.setEditable(false);     
            dobDateField.setEnabled(false);
            covidDiagnosedDateChooser.setEnabled(false);
    }
    
    private ImageIcon setPicturebyte(byte[] byteArrayImage){

        ImageIcon imageCar;
        imageCar = new ImageIcon(byteArrayImage);
        Image picCar = imageCar.getImage();
        JLabel pictureLabel1 = new JLabel();
        pictureLabel1.setSize(107, 133);
        Image resizedImage = picCar.getScaledInstance(pictureLabel1.getWidth(), pictureLabel1.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon selectedCarPicture = new ImageIcon(resizedImage);
        return selectedCarPicture;  

    
    }
}
