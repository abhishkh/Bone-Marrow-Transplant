/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BloodLeukemia_Centre_Coordinator_Role;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Magic.Design.*;
import Magic.Design.MyJLabel;
import Business.People.PatientRequestDirectory;
import Business.People.PatientRequest;
import Magic.Design.MyJButton;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.SwingUtilities.getWindowAncestor;
import javax.swing.filechooser.FileNameExtensionFilter;
import userinterface.GovernmentCoordinatorRole.DonorRegistrationForm;
import static userinterface.GovernmentCoordinatorRole.DonorRegistrationForm.emailValidator;

/**
 *
 * @author abhishekmathukiya
 */
public class RecieverRegistrationForm extends javax.swing.JPanel {

    /**
     * Creates new form RecieverRegistrationForm
     */
   
    
    private EcoSystem system;
    private byte[] tempdP;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private boolean emailValid;
    private int yesno;
    private ButtonGroup radioGroup1;
    
    
    public RecieverRegistrationForm(EcoSystem system) {
        initComponents();
        this.system = system;
        this.radioGroup1 = new ButtonGroup();
       // ButtonGroup radioGroup1 = new ButtonGroup();
        radioGroup1.add(rdbYes);
        radioGroup1.add(rdbNo);
        
        populateGenderComboBox();
        populateStateComboBox();     
        HideLable();
    }
    
     private void HideLable(){
    lblDiagnosedDate.setVisible(false);
    diagnosedDateChooser.setVisible(false);
}
  
    private void populateGenderComboBox(){
        cmbGender.addItem("Select");
      cmbGender.addItem("Male");
      cmbGender.addItem("Female");
      cmbGender.addItem("Other");
        }
  
     private void populateStateComboBox(){
         cmbState.addItem("Select");
      cmbState.addItem("California");
      cmbState.addItem("Massachusetts");
      cmbState.addItem("Georgia");
      cmbState.addItem("Arizona");
      cmbState.addItem("Texas");
      cmbState.addItem("Florida");
      cmbState.addItem("Illinois");
      }
      public static boolean phoneNumberValidator(String contact) {
        Pattern pattern;
        Matcher matcher;
        String PHONE_PATTERN = "^[0-9]{10}$";
        pattern = Pattern.compile(PHONE_PATTERN);
        matcher = pattern.matcher(contact);
        return matcher.matches();
        }
    public static boolean zipCodeValidator(String zip) {
        Pattern pattern;
        Matcher matcher;
        String zip_pattern = "^[0-9]{5}$";
        pattern = Pattern.compile(zip_pattern);
        matcher = pattern.matcher(zip);
        return matcher.matches();
        } 
    public static boolean emailValidator(String email) {
        Pattern pattern;
        Matcher matcher;
        String EMAIL_PATTERN = "^[\\w!#$%&’*+/=?`{|}~^-]+(?:\\.[\\w!#$%&’*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        pattern = Pattern.compile(EMAIL_PATTERN);
        matcher = pattern.matcher(email);
        return matcher.matches();
        }
    private void disableAllButton(){
    
        txtUID.setEnabled(false);
        txtName.setEnabled(false);
        dateDOB.setEnabled(false);
        txtAge.setEnabled(false);
        txtEmailID.setEnabled(false);
        txtContactNumber.setEnabled(false);
        cmbGender.setEnabled(false);
        txtHLAType.setEnabled(false);
        diagnosedDateChooser.setEnabled(false);
        txtStreetAddress.setEnabled(false);
        txtCity.setEnabled(false);
        cmbState.setEnabled(false);
        txtZipCode.setEnabled(false);
        rdbYes.setEnabled(false);
        rdbNo.setEnabled(false);
        btnAddPhoto.setEnabled(false);
    }
      public boolean isAlpha(String name) {
        return name.matches("[a-zA-Z]+");
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diagnosisBtnGroup = new javax.swing.ButtonGroup();
        lblStreetAddress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        lblZipCode = new javax.swing.JLabel();
        lblUID = new javax.swing.JLabel();
        txtZipCode = new javax.swing.JTextField();
        txtUID = new javax.swing.JTextField();
        lblContactNumber = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        lblEmailID = new javax.swing.JLabel();
        txtEmailID = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        lblDiagnosisConfirmation = new javax.swing.JLabel();
        lblHLAType = new javax.swing.JLabel();
        txtStreetAddress = new javax.swing.JTextField();
        lblDiagnosedDate = new javax.swing.JLabel();
        btnAddPhoto = new javax.swing.JButton();
        rdbYes = new javax.swing.JRadioButton();
        rdbNo = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        lblPatientRegistrationForm = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        cmbState = new javax.swing.JComboBox();
        cmbGender = new javax.swing.JComboBox();
        lblProfilePicture = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        lblCancerStatus = new javax.swing.JLabel();
        lblBioDetails = new javax.swing.JLabel();
        diagnosedDateChooser = new com.toedter.calendar.JDateChooser();
        dateDOB = new com.toedter.calendar.JDateChooser();
        txtHLAType = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));
        setMinimumSize(new java.awt.Dimension(1350, 718));
        setPreferredSize(new java.awt.Dimension(1350, 718));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        lblStreetAddress.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblStreetAddress.setText("Street ");

        lblCity.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblCity.setText("City");

        btnSubmit.setBackground(new java.awt.Color(102, 102, 102));
        btnSubmit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Submit");
        btnSubmit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lblName.setBackground(new java.awt.Color(0, 0, 0));
        lblName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblName.setText("Name");

        txtCity.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        txtName.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblState.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblState.setText("State");

        lblZipCode.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblZipCode.setText("ZipCode");

        lblUID.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblUID.setText("UID");

        txtZipCode.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        txtUID.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        lblContactNumber.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblContactNumber.setText("Contact Number");

        lblDOB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDOB.setText("DOB");

        txtContactNumber.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtContactNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactNumberActionPerformed(evt);
            }
        });

        lblEmailID.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblEmailID.setText("Email ID");

        txtEmailID.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtEmailID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                uEmailKeyTyped(evt);
            }
        });

        txtAge.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtAge.setForeground(new java.awt.Color(255, 255, 255));
        txtAge.setEnabled(false);
        txtAge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAgeMouseClicked(evt);
            }
        });

        lblGender.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblGender.setText("Gender");

        lblDiagnosisConfirmation.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDiagnosisConfirmation.setText("Was your cancer diagnosis confirmed by a medical practitioner?");

        lblHLAType.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblHLAType.setText("HLA Types");

        txtStreetAddress.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtStreetAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStreetAddressActionPerformed(evt);
            }
        });

        lblDiagnosedDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDiagnosedDate.setText("Cancer diagnosed date");

        btnAddPhoto.setBackground(new java.awt.Color(102, 102, 102));
        btnAddPhoto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAddPhoto.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPhoto.setText("Add photo");
        btnAddPhoto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPhotoActionPerformed(evt);
            }
        });

        rdbYes.setBackground(new java.awt.Color(255, 204, 204));
        diagnosisBtnGroup.add(rdbYes);
        rdbYes.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        rdbYes.setText("Yes");
        rdbYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbYesActionPerformed(evt);
            }
        });

        rdbNo.setBackground(new java.awt.Color(255, 204, 204));
        diagnosisBtnGroup.add(rdbNo);
        rdbNo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        rdbNo.setText("No");
        rdbNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbNoActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(926, 70));

        lblPatientRegistrationForm.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPatientRegistrationForm.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientRegistrationForm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPatientRegistrationForm.setText("Patient Registration Form ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(487, 487, 487)
                .addComponent(lblPatientRegistrationForm, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(794, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPatientRegistrationForm, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblAge.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblAge.setText("Age");

        cmbState.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        cmbState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateActionPerformed(evt);
            }
        });

        cmbGender.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        cmbGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGenderActionPerformed(evt);
            }
        });

        lblProfilePicture.setBackground(new java.awt.Color(0, 0, 0));
        lblProfilePicture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        lblProfilePicture.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("New Form");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lblCancerStatus.setFont(new java.awt.Font("Arial", 1, 22)); // NOI18N
        lblCancerStatus.setText("Cancer Status");

        lblBioDetails.setFont(new java.awt.Font("Arial", 1, 22)); // NOI18N
        lblBioDetails.setText("Patient  Details");

        diagnosedDateChooser.setBackground(new java.awt.Color(255, 255, 255));
        diagnosedDateChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        dateDOB.setBackground(new java.awt.Color(255, 255, 255));
        dateDOB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtHLAType.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtHLAType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "HLA_A", "HLA_B", "HLA_C", "HLA_DR", "HLA_DBQ1", " " }));

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Back");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBioDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDOB)
                                            .addComponent(lblEmailID)
                                            .addComponent(lblGender)
                                            .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblState, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblZipCode))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEmailID)
                                            .addComponent(dateDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtName)
                                            .addComponent(cmbGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtZipCode)
                                            .addComponent(txtCity)
                                            .addComponent(cmbState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtStreetAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblUID, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblAge)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblContactNumber)
                                                    .addComponent(lblHLAType))
                                                .addGap(37, 37, 37)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtHLAType, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAddPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblProfilePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdbYes)
                                        .addGap(30, 30, 30)
                                        .addComponent(rdbNo))
                                    .addComponent(lblDiagnosisConfirmation)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblDiagnosedDate)
                                        .addGap(66, 66, 66)
                                        .addComponent(diagnosedDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblCancerStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblBioDetails)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dateDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblState)
                            .addComponent(cmbState, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtUID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblUID))
                            .addComponent(lblName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblAge)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblDOB))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblContactNumber)
                                .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblEmailID))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtHLAType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHLAType)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblProfilePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCancerStatus)
                        .addGap(18, 18, 18)
                        .addComponent(lblDiagnosisConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbYes)
                            .addComponent(rdbNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDiagnosedDate)
                            .addComponent(diagnosedDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(210, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblStreetAddress)
                            .addComponent(txtStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblZipCode)
                            .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        PatientRequest patientrequest = new PatientRequest();//system.getPatientRequestDirectory().addPatientRequest();
        if ( lblProfilePicture == null ){
            lblProfilePicture.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblProfilePicture.setForeground(Color.red);
            btnAddPhoto.setBorder(BorderFactory.createLineBorder(Color.RED));
            btnAddPhoto.setForeground(Color.red);
//                JOptionPane.showMessageDialog(null,new JLabel(  "<html><b>Please add PP</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
        }
        if ( cmbState.getSelectedItem().equals("Select") ){
            cmbState.setBorder(BorderFactory.createLineBorder(Color.RED));
            cmbState.setForeground(Color.red);
        }
        if ( cmbGender.getSelectedItem().equals("Select") ){
            cmbGender.setBorder(BorderFactory.createLineBorder(Color.RED));
            cmbGender.setForeground(Color.red);
        }
        if ( txtHLAType.getSelectedItem().equals("Select") ){
            txtHLAType.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtHLAType.setForeground(Color.red);
        }
        if (txtName.getText().isEmpty()) {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtName.setForeground(Color.red);
        }
        if (txtUID.getText().isEmpty()) {
            txtUID.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtUID.setForeground(Color.red);
        }        
        if (txtEmailID.getText().isEmpty()) {
            txtEmailID.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtEmailID.setForeground(Color.red);
        }
        if (txtContactNumber.getText().isEmpty()) {
            txtContactNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtContactNumber.setForeground(Color.red);
        }
        if (txtZipCode.getText().isEmpty()) {
            txtZipCode.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtZipCode.setForeground(Color.red);
        }
        if (txtCity.getText().isEmpty()) {
            txtCity.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtCity.setForeground(Color.red);
        }
        if (txtStreetAddress.getText().isEmpty()) {
            txtStreetAddress.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtStreetAddress.setForeground(Color.red);
        }
         if (diagnosedDateChooser.getDate() == null ) {
            diagnosedDateChooser.setBorder(BorderFactory.createLineBorder(Color.RED));
            diagnosedDateChooser.setForeground(Color.red);
        }
        if (dateDOB.getDate() == null ) {
            dateDOB.setBorder(BorderFactory.createLineBorder(Color.RED));
            dateDOB.setForeground(Color.red);
        }
         if (txtAge.getText().isEmpty()) {
            txtAge.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtAge.setForeground(Color.red);
        }
        
         
        //
        //
        if (    txtName.getText().isEmpty() || txtEmailID.getText().isEmpty() || txtCity.getText().isEmpty() ||txtContactNumber.getText().isEmpty() ||
                txtZipCode.getText().isEmpty() || txtStreetAddress.getText().isEmpty() || txtUID.getText().isEmpty() ||
                dateDOB.getDate() == null || diagnosedDateChooser.getDate() == null || txtAge.getText().isEmpty() ||
                String.valueOf(cmbGender.getSelectedItem()).equals("") || 
                String.valueOf(txtHLAType.getSelectedItem()).equals("") || 
                String.valueOf(cmbState.getSelectedItem()).equals("") ||
                lblProfilePicture == null
                )
                
            { 
                JOptionPane.showMessageDialog(null,new JLabel(  "<html><b>All fields are mandatory!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
             return ;
        //    JOptionPane.showMessageDialog(null, "All fields are mandatory!", "Error", JOptionPane.ERROR_MESSAGE);
          //   return ;
            }
         
       else if(  !rdbNo.isSelected()  &&  !rdbYes.isSelected())
        {
            JOptionPane.showMessageDialog(null,new JLabel(  "<html><b>All fields are mandatory!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
             return ;
        //JOptionPane.showMessageDialog(null, "All fields are mandatory!", "Error", JOptionPane.ERROR_MESSAGE);
        
        }
        
       else   if ( !phoneNumberValidator(txtContactNumber.getText())   ){
           txtContactNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtContactNumber.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, new JLabel("<html><b>Contact Number should be 10 digit!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
           // return;
           //JOptionPane.showMessageDialog(null, "Contact number should be 10 digit" , "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        else   if (  !zipCodeValidator(txtZipCode.getText()) ){
            txtZipCode.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtZipCode.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, new JLabel("<html><b>Zip should be 5 digit!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
           return;
           //JOptionPane.showMessageDialog(null, "Zip should be 5 digit" , "Error", JOptionPane.ERROR_MESSAGE);
           // return;
        }
        
        else if (!isAlpha(txtName.getText()))
        {
         txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtName.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, new JLabel("<html><b>Name must contain only alphabets</b>!</html>") , "Error", JOptionPane.ERROR_MESSAGE);
            return;
            //JOptionPane.showMessageDialog(null, "Name must contain only alphabets." , "Error", JOptionPane.ERROR_MESSAGE);
            //return;
        }
        else if (!isAlpha(txtCity.getText()))
        {
         txtCity.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtCity.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, new JLabel("<html><b>Name of the City must contain only alphabets!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
            return;
            //JOptionPane.showMessageDialog(null, "City name must contain only alphabets." , "Error", JOptionPane.ERROR_MESSAGE);
            //return;
        }
       
        else   if ( !emailValidator(txtEmailID.getText()) ){
            txtEmailID.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtEmailID.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, new JLabel("<html><b>Email ID must be in correct format!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
//           JOptionPane.showMessageDialog(null, "Email ID must be in correct format!" , "Error", JOptionPane.ERROR_MESSAGE);
           return;
        } 
        //
        //
        //
        
       else{
            try {
                patientrequest.getHla().updateHLAlist(String.valueOf(txtHLAType.getSelectedItem()));
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Patient's HLA Type can only be one of these HLA_A,HLA_B,HLA_C,HLA_DR,HLA_DBQ1</b></html>"));
                return;
            }
            
            int n = JOptionPane.showConfirmDialog(null,new JLabel("<html><b>Would you like to submit the form?</b></html>"),
                    "CONFIRMATION REQUIRED",JOptionPane.YES_NO_OPTION);

            if(n == 0)
            { 
        
        
        patientrequest.setReceiverID(txtUID.getText()); //UID, receiverID  
        patientrequest.setName(txtName.getText()); // Name
        patientrequest.setDob(dateDOB.getDate()); // DOB 
        patientrequest.setCancerDiagnosedDate(diagnosedDateChooser.getDate()); // cancerDiagnosedDate            
        patientrequest.setAge(Integer.parseInt(txtAge.getText())); // Age
        patientrequest.setGender((String)cmbGender.getSelectedItem()); // gender
        
//        patientrequest.getHla().updateHLAlist((String) hlaTypesText.getText()); // HLAType
        patientrequest.setStreetAddress(txtStreetAddress.getText()); // streetAddress
        patientrequest.setCity(txtCity.getText()); // city
        patientrequest.setState((String) cmbState.getSelectedItem()); // state
        patientrequest.setZipCode(Integer.parseInt(txtZipCode.getText())); // zipCode
        patientrequest.setContact(Long.parseLong(txtContactNumber.getText())); // contact
        patientrequest.setEmailID(txtEmailID.getText()); // emailID
        patientrequest.setStatus("New Request"); // status
        patientrequest.setdP(tempdP);
        
        system.getPatientRequestDirectory().addPatientRequest(patientrequest);
        
        
        if(rdbYes.isSelected())
        {patientrequest.setLabConfirmation(true); //  labConfirmation
        }
        else if(rdbNo.isSelected())
        {patientrequest.setLabConfirmation(false); //  labConfirmation
        }
     
        JOptionPane.showMessageDialog(null, new JLabel("<html><b>Thank you for registering! We will soon get back to you. <br>Take Care!!</b></html>"));
        
        
        
        
        dB4OUtil.storeSystem(system);
        disableAllButton();
       }}
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    
    public ImageIcon ResizeImage(String ImagePath)
    {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(lblProfilePicture.getWidth(), lblProfilePicture.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }
    
    
     private ImageIcon setPicture(String carImageLocation, JLabel carImage){

        ImageIcon imageCar;
        imageCar = new ImageIcon(carImageLocation);
        Image picCar = imageCar.getImage();
        Image resizedImage = picCar.getScaledInstance(carImage.getWidth(), carImage.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon selectedCarPicture = new ImageIcon(resizedImage);
        
        return selectedCarPicture;  
}
    
    
    private void txtContactNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNumberActionPerformed

    private void cmbStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateActionPerformed

    }//GEN-LAST:event_cmbStateActionPerformed

    private void cmbGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGenderActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
         Date dob = dateDOB.getDate();
        System.out.println(dob.getYear());
        txtAge.setText((String.valueOf(new Date().getYear()-dob.getYear())));
        
    }//GEN-LAST:event_formMouseClicked

    private void txtAgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAgeMouseClicked
        // TODO add your handling code here:
        Date dob = dateDOB.getDate();
        System.out.println(dob.getYear());
        txtAge.setText((String.valueOf(new Date().getYear()-dob.getYear())));
        
    }//GEN-LAST:event_txtAgeMouseClicked

    private void btnAddPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPhotoActionPerformed
        // TODO add your handling code here:
        
       JFileChooser file = new JFileChooser();
          file.setCurrentDirectory(new File(System.getProperty("user.dir")));
          //filter the files
          FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
          file.addChoosableFileFilter(filter);
          int result = file.showSaveDialog(null);
           //if the user click on save in Jfilechooser
          if(result == JFileChooser.APPROVE_OPTION){
              File selectedFile = file.getSelectedFile();
              tempdP = new byte[(int) selectedFile.length()]; 
                FileInputStream fis;
             try {
                 fis = new FileInputStream(selectedFile);
                 fis.read(tempdP);
                 fis.close();
             } catch (IOException ex) {
                 Logger.getLogger(DonorRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             }             
              lblProfilePicture.setIcon(ResizeImage(selectedFile.getAbsolutePath()));
              lblProfilePicture.setIcon(setPicture(selectedFile.getAbsolutePath(),lblProfilePicture));
          }

          else if(result == JFileChooser.CANCEL_OPTION){
              System.out.println("No File Select");
          }
        
        
    }//GEN-LAST:event_btnAddPhotoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        lblProfilePicture.setIcon(null);
        radioGroup1.clearSelection();
       // buttonYes.setSelected(false);
       // buttonYes.resetKeyboardActions();
        txtUID.setEnabled(true);
        txtName.setEnabled(true);
        dateDOB.setEnabled(true);
        txtAge.setEnabled(false);
        txtEmailID.setEnabled(true);
        txtContactNumber.setEnabled(true);
        cmbGender.setEnabled(true);
        txtHLAType.setEnabled(true);
        diagnosedDateChooser.setEnabled(true);
        txtStreetAddress.setEnabled(true);
        txtCity.setEnabled(true);
        cmbState.setEnabled(true);
        txtZipCode.setEnabled(true);
        rdbYes.setEnabled(true);
        rdbNo.setEnabled(true);
        btnAddPhoto.setEnabled(true);
      

        txtUID.setText("");
        txtName.setText("");
        txtAge.setText("");
        txtEmailID.setText("");
        txtContactNumber.setText("");
        txtStreetAddress.setText("");
        txtCity.setText("");
        txtZipCode.setText("");
        txtHLAType.setSelectedItem("");

        cmbGender.setSelectedItem("Select");
        cmbState.setSelectedItem("Select");
        

        dateDOB.setCalendar(null);
        diagnosedDateChooser.setCalendar(null);
       
        // ButtonGroup radioGroup1 = new ButtonGroup();       
        lblProfilePicture.removeAll();
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void uEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uEmailKeyTyped
        // TODO add your handling code here:
        
         if (!emailValidator(txtEmailID.getText())) {
            emailValid = false;
        } else {
            txtEmailID.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            emailValid = true;
            int delay = 2500; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                }
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
        
        
        
        
        
        
    }//GEN-LAST:event_uEmailKeyTyped

    private void rdbNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbNoActionPerformed
        // TODO add your handling code here:
        lblDiagnosedDate.setVisible(false);
        diagnosedDateChooser.setVisible(false);
    }//GEN-LAST:event_rdbNoActionPerformed

    private void rdbYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbYesActionPerformed
        // TODO add your handling code here:
        lblDiagnosedDate.setVisible(true);
        diagnosedDateChooser.setVisible(true);
        
    }//GEN-LAST:event_rdbYesActionPerformed

    private void txtStreetAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStreetAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStreetAddressActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         JFrame frame = (JFrame) getWindowAncestor(this);
        frame.dispose();
        RecieverRegistrationForm.super.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPhoto;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cmbGender;
    private javax.swing.JComboBox cmbState;
    private com.toedter.calendar.JDateChooser dateDOB;
    private com.toedter.calendar.JDateChooser diagnosedDateChooser;
    private javax.swing.ButtonGroup diagnosisBtnGroup;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBioDetails;
    private javax.swing.JLabel lblCancerStatus;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDiagnosedDate;
    private javax.swing.JLabel lblDiagnosisConfirmation;
    private javax.swing.JLabel lblEmailID;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHLAType;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPatientRegistrationForm;
    private javax.swing.JLabel lblProfilePicture;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblStreetAddress;
    private javax.swing.JLabel lblUID;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JRadioButton rdbNo;
    private javax.swing.JRadioButton rdbYes;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JComboBox<String> txtHLAType;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtStreetAddress;
    private javax.swing.JTextField txtUID;
    private javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables
}
